[tox]
# NOTE: Running "./setup.py check" generates "version.py", required for
#       some testing
# FIXME: create px.pex in python3 mode
#        verify it has "python" as its interpreter
#        verify there are no ".so" files in the pex file
#        run it and make sure that it doesn't fail
#        validate running with --version vs "git describe --dirty"
# FIXME: take the python2 px.pex and put it in {toxinidir} as "px.pex"
#        verify it has "python" as its interpreter
# FIXME: pip uninstall --yes pxpx, then pip install pxpx-*.whl
#        verify that px bash doesn't fail
#        verify px --version against "git describe --dirty"
# FIXME: run pylint?
# FIXME: parallel by default?
# FIXME: black in python3 mode, let this replace the flake8 invocations

envlist=
    mypy2
    mypy3
    shellcheck
    installtest
    pytest2
    pytest3
    pex2, test-pex2

[testenv:mypy2]
basepython = python3
skip_install = true
# FIXME: Put mypy version number in a constant
# FIXME: Put .py source files in a constant
deps =
    mypy==0.770
commands =
    /bin/bash -c 'mypy ./*.py ./*/*.py --python-version=2.7'

[testenv:mypy3]
basepython = python3
skip_install = true
# FIXME: Put mypy version number in a constant
# FIXME: Put .py source files in a constant
deps =
    mypy==0.770
commands =
    /bin/bash -c 'mypy ./*.py ./*/*.py --disallow-any-generics'

[testenv:shellcheck]
skip_install = true
commands =
    /bin/bash -c 'shellcheck ./*.sh ./*/*.sh'

[testenv:installtest]
skip_install = true
commands =
    {toxinidir}/tests/installtest.sh

[testenv:pytest2]
skip_install = true
basepython = python2
deps =
    # pytest 4.6.9 is the latest one with Python 2 support
    pytest == 4.6.9
    pytest-avoidance == 0.3.0
    -r requirements.txt
commands =
    pytest tests

[testenv:pytest3]
skip_install = true
basepython = python3
deps =
    pytest == 5.4.1
    pytest-avoidance == 0.3.0
    -r requirements.txt
commands =
    pytest tests

[testenv:pex2]
# Create {toxinidir}/dist2/px.pex
basepython = python2
deps =
    setuptools
    wheel
    pex == 1.6.1
skip_install = true
install_command =
    # make sure we use the latest setuptools and wheel
    pip install --upgrade {opts} {packages}
commands =
    # clean up build/ and dist/ folders
    python -c 'import shutil; shutil.rmtree("dist", ignore_errors=True)'
    python setup.py clean --all
    # build wheel
    python setup.py bdist_wheel --universal --dist-dir {toxinidir}/dist2
    # build pex
    /bin/bash -c 'pex --python-shebang="#!/usr/bin/env python" --disable-cache -r requirements.txt {toxinidir}/dist2/pxpx-*.whl -m px.px -o {toxinidir}/dist2/px.pex'

[testenv:test-pex2]
depends = pex2
skip_install = true
commands =
    # Test that the shebang line contains the word "python"
    # FIXME: Test that it's "python" that we're using as interpreter?
    #  Could require some different test logic.
    /bin/bash -c 'head -n1 {toxinidir}/dist2/px.pex | grep -w python'
    # Test that there are no natively compiled dependencies. They make
    # distribution a lot harder. If this triggers, fix your dependencies!
    /bin/bash -c '! unzip -qq -l "{toxinidir}/dist2/px.pex" "*.so"'
    # Run pex and ensure it doesn't fail
    /bin/bash -c 'python -Werror -Wdefault:"the imp module" {toxinidir}/dist2/px.pex'
    # Test version string vs git
    /bin/bash -x -c 'test "$("{toxinidir}/dist2/px.pex" --version)" = "$(git describe --dirty)"'
