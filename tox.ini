# Can be run through "tox.sh" for convenience

[tox]
# Required for `tox -p auto` to work; here's the commit we're after:
# https://github.com/tox-dev/tox/pull/1202
minversion = 3.8.0

# FIXME: run pylint?
# FIXME: before everything else, run black in python3 mode

envlist=
    mypy2
    mypy3
    shellcheck
    installtest
    pytest2
    pytest3
    pex2, test-pex2
    pex3, test-pex3
    pex
    test-wheel

[testenv]
skip_install = true

[testenv:version.py]
basepython = python3
commands =
    # This creates px/version.py
    /bin/bash -c './setup.py check'

[testenv:mypy2]
depends = version.py
basepython = python3
# FIXME: Put mypy version number in a constant
# FIXME: Put .py source files list in a constant
deps =
    mypy==0.770
commands =
    /bin/bash -c 'mypy ./*.py ./*/*.py --python-version=2.7'

[testenv:mypy3]
depends = version.py
basepython = python3
# FIXME: Put mypy version number in a constant
# FIXME: Put .py source files list in a constant
deps =
    mypy==0.770
commands =
    /bin/bash -c 'mypy ./*.py ./*/*.py --disallow-any-generics'

[testenv:shellcheck]
commands =
    /bin/bash -c 'shellcheck ./*.sh ./*/*.sh'

[testenv:installtest]
commands =
    {toxinidir}/tests/installtest.sh

[testenv:pytest2]
depends = version.py
basepython = python2
deps =
    # pytest 4.6.9 is the latest one with Python 2 support
    pytest == 4.6.9
    pytest-avoidance == 0.3.0
    -r requirements.txt
commands =
    pytest tests

[testenv:pytest3]
depends = version.py
basepython = python3
deps =
    pytest == 5.4.1
    pytest-avoidance == 0.3.0
    -r requirements.txt
commands =
    pytest tests

[testenv:pex2]
# Create {toxinidir}/dist2/px.pex
basepython = python2
deps =
    setuptools
    wheel
    pex == 1.6.1
install_command =
    # make sure we use the latest setuptools and wheel
    pip install --upgrade {opts} {packages}
allowlist_externals = rm
commands =
    # clean up build/ and dist/ folders
    python -c 'import shutil; shutil.rmtree("dist", ignore_errors=True)'
    python setup.py clean --all
    # build wheel
    rm -rf dist2
    python setup.py bdist_wheel --universal --bdist-dir {toxinidir}/bdist2 --dist-dir {toxinidir}/dist2
    # build pex
    /bin/bash -c 'pex --python-shebang="#!/usr/bin/env python" --disable-cache -r requirements.txt {toxinidir}/dist2/pxpx-*.whl -m px.px -o {toxinidir}/dist2/px.pex'

[testenv:test-pex2]
basepython = python2
depends = pex2
commands =
    # Verify we have the correct shebang
    /bin/bash -c 'head -n1 {toxinidir}/dist2/px.pex | grep -Fx "#!/usr/bin/env python"'
    # Test that there are no natively compiled dependencies. They make
    # distribution a lot harder. If this triggers, fix your dependencies!
    /bin/bash -c '! unzip -qq -l "{toxinidir}/dist2/px.pex" "*.so"'
    # Run pex and ensure it doesn't fail
    python -Werror {toxinidir}/dist2/px.pex
    # Test version string vs git
    /bin/bash -x -c 'test "$("{toxinidir}/dist2/px.pex" --version)" = "$(git describe --dirty)"'

[testenv:pex3]
# Create {toxinidir}/dist3/px.pex
basepython = python3
deps =
    setuptools
    wheel
    pex == 1.6.1
install_command =
    # make sure we use the latest setuptools and wheel
    pip install --upgrade {opts} {packages}
allowlist_externals = rm
commands =
    # clean up build/ and dist/ folders
    python -c 'import shutil; shutil.rmtree("dist", ignore_errors=True)'
    python setup.py clean --all
    # build wheel
    rm -rf dist3
    python setup.py bdist_wheel --universal --bdist-dir {toxinidir}/bdist3 --dist-dir {toxinidir}/dist3
    # build pex
    /bin/bash -c 'pex --python-shebang="#!/usr/bin/env python3" --disable-cache -r requirements.txt {toxinidir}/dist3/pxpx-*.whl -m px.px -o {toxinidir}/dist3/px.pex'

[testenv:test-pex3]
basepython = python3
depends = pex3
commands =
    # Verify we have the correct shebang
    /bin/bash -c 'head -n1 {toxinidir}/dist3/px.pex | grep -Fx "#!/usr/bin/env python3"'
    # Test that there are no natively compiled dependencies. They make
    # distribution a lot harder. If this triggers, fix your dependencies!
    /bin/bash -c '! unzip -qq -l "{toxinidir}/dist3/px.pex" "*.so"'
    # Run pex and ensure it doesn't fail
    python -Werror -Wdefault:"the imp module" -Wdefault:"'U' mode is deprecated" {toxinidir}/dist3/px.pex
    # Test version string vs git
    /bin/bash -x -c 'test "$("{toxinidir}/dist3/px.pex" --version)" = "$(git describe --dirty)"'

[testenv:pex]
# Put px.pex in place for distribution
depends = test-pex2
commands =
    python -c 'import shutil; shutil.copyfile("{toxinidir}/dist2/px.pex", "{toxinidir}/px.pex")'

[testenv:test-wheel]
# Test installing using pip
depends = test-pex3
basepython = python3
commands =
    /bin/bash -c "pip uninstall --yes pxpx"
    /bin/bash -c "pip install {toxinidir}/dist3/pxpx-*.whl"
    # Verify we can run the px we just installed using pip
    px tox
    # Test version string vs git
    /bin/bash -x -c 'test "$(px --version)" = "$(git describe --dirty)"'
